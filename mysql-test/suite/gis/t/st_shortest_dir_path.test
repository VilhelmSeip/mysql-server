# This test tests the ST_SHORTEST_DIR_PATH function.

--echo # ---------------------
--echo # |[0] creating tables|
--echo # ---------------------

CREATE TABLE edges (
  id INT PRIMARY KEY,
  from_id INT,
  to_id INT,
  cost DOUBLE,
  type ENUM("undefined", "car", "bike", "pedestrian", "spatial")
);

--echo # --------------------------------------------
--echo # |[1] testing Dijkstra i.e. without geometry|
--echo # --------------------------------------------

INSERT INTO edges VALUES
(50, 0, 1, 3.0, "undefined"),
(51, 0, 2, 5.0, "undefined"),
(52, 0, 3, 8.0, "undefined"),
(53, 1, 4, 1.0, "undefined"),
(54, 4, 3, 2.0, "undefined"),
(55, 3, 5, 6.0, "undefined"),
(56, 2, 5, 12.0, "undefined"),
(57, 4, 5, 10.0, "undefined"),
(58, 5, 7, 3.0, "undefined"),
(59, 6, 10, 17.0, "undefined"),
(60, 4, 8, 15.0, "undefined"),
(61, 2, 6, 16.0, "undefined"),
(62, 4, 7, 9.0, "undefined"),
(63, 5, 8, 13.0, "undefined"),
(64, 8, 9, 4.0, "undefined"),
(65, 8, 10, 12.0, "undefined"),
(66, 10, 12, 8.0, "undefined"),
(67, 9, 11, 5.0, "undefined"),
(68, 8, 11, 8.0, "undefined"),
(69, 4, 12, 25.0, "undefined"),
(70, 12, 13, 3.0, "undefined"),
(71, 12, 15, 9.0, "undefined"),
(72, 13, 17, 11.0, "undefined"),
(73, 14, 15, 2.0, "undefined"),
(74, 12, 14, 6.0, "undefined"),
(75, 15, 18, 10.0, "undefined"),
(76, 18, 20, 7.0, "undefined"),
(77, 16, 21, 13.0, "undefined"),
(78, 17, 19, 8.0, "undefined"),
(79, 15, 19, 14.0, "undefined"),
(80, 21, 23, 4.0, "undefined"),
(81, 21, 22, 3.0, "undefined"),
(82, 21, 25, 9.0, "undefined"),
(83, 23, 26, 8.0, "undefined"),
(84, 22, 24, 5.0, "undefined"),
(85, 20, 24, 10.0, "undefined"),
(86, 15, 16, 2.0, "undefined"),
(87, 24, 25, 3.0, "undefined")
;

SELECT ST_SHORTEST_DIR_PATH(id, from_id, to_id, cost, NULL, 0, 5) FROM edges;

SELECT ST_SHORTEST_DIR_PATH(id, from_id, to_id, cost, NULL, 4, 12) FROM edges;

SELECT ST_SHORTEST_DIR_PATH(id, from_id, to_id, cost, NULL, 3, 8) FROM edges;

SELECT ST_SHORTEST_DIR_PATH(id, from_id, to_id, cost, NULL, 4, 10) FROM edges;

SELECT ST_SHORTEST_DIR_PATH(id, from_id, to_id, cost, NULL, 0, 22) FROM edges;

SELECT ST_SHORTEST_DIR_PATH(id, from_id, to_id, cost, NULL, 4, 26) FROM edges;

SELECT ST_SHORTEST_DIR_PATH(id, from_id, to_id, cost, NULL, 3, 19) FROM edges;

INSERT INTO edges VALUES
(10, 0, 1, 2.0, "car"),
(11, 1, 2, 3.0, "car"),
(12, 0, 2, 8.0, "car"),

(20, 0, 1, 20.0, "bike"),
(21, 1, 2, 25.0, "bike"),
(22, 0, 2, 40.0, "bike"),

(30, 0, 1, 80.0, "pedestrian"),
(31, 1, 2, 100.0, "pedestrian"),
(32, 0, 2, 200.0, "pedestrian"),
(33, 1, 3, 40.0, "pedestrian"),
(34, 3, 2, 20.0, "pedestrian")
;

SELECT ST_SHORTEST_DIR_PATH(id, from_id, to_id, cost, NULL, 0, 2) FROM edges GROUP BY type;

--echo # -----------------------------------
--echo # |[2] testing A* i.e. with geometry|
--echo # -----------------------------------

DELETE FROM edges;

CREATE TABLE points (
  id INT PRIMARY KEY,
  point POINT NOT NULL SRID 0
);
ALTER TABLE edges
ADD CONSTRAINT point_ref FOREIGN KEY (to_id) REFERENCES points(id);

INSERT INTO points VALUES
(  0, POINT(  0,  0 ) ),
(  1, POINT(  2,  1 ) ),
(  2, POINT( -1, -1 ) ),
(  3, POINT(  2, -2 ) ),
(  4, POINT(  1,  3 ) ),
(  5, POINT(  4,  3 ) ),
(  6, POINT(  4,  1 ) ),
(  7, POINT(  3, -1 ) ),
(  8, POINT(  6,  2 ) ),
(  9, POINT( -2,  1 ) ),
( 10, POINT( -3, -2 ) ),
( 11, POINT( -1,  3 ) ),
( 12, POINT( -1,  5 ) ),
( 13, POINT( -2,  3 ) ),
( 14, POINT(  3,  3 ) ),
( 15, POINT(  2,  4 ) ),
( 16, POINT(  4,  6 ) ),
( 17, POINT(  4,  7 ) ),
( 18, POINT(  6,  3 ) ),
( 19, POINT(  5,  9 ) ),
( 20, POINT(  7,  10 ) ),
( 21, POINT(  9,  11 ) ),
( 22, POINT(  10,  4 ) ),
( 23, POINT(  13,  15 ) ),
( 24, POINT(  12,  14 ) ),
( 25, POINT(  14,  16 ) ),
( 26, POINT(  15,  19 ) ),
( 27, POINT(  17,  22 ) ),
( 28, POINT(  19,  24 ) ),
( 29, POINT(  21,  25 ) ),
( 30, POINT(  26,  30 ) ),
( 31, POINT(  29,  32 ) ),
( 32, POINT(  31,  36 ) ),
( 33, POINT(  35,  39 ) ),
( 34, POINT(  37,  42 ) ),
( 35, POINT(  38,  40 ) ),
( 36, POINT(  25,  32 ) ),
( 37, POINT(  40,  42 ) )
;

INSERT INTO edges VALUES
(0, 0, 1, 3.0, "spatial"),
(1, 0, 2, 5.0, "spatial"),
(2, 0, 3, 8.0, "spatial"),
(3, 1, 4, 1.0, "spatial"),
(4, 4, 3, 2.0, "spatial"),
(5, 3, 5, 6.0, "spatial"),
(6, 2, 5, 12.0, "spatial"),
(7, 4, 5, 10.0, "spatial"),
(8, 5, 7, 3.0, "spatial"),
(9, 6, 10, 17.0, "spatial"),
(10, 4, 8, 15.0, "spatial"),
(11, 2, 6, 16.0, "spatial"),
(12, 4, 7, 9.0, "spatial"),
(13, 5, 8, 13.0, "spatial"),
(14, 8, 9, 4.0, "spatial"),
(15, 8, 10, 12.0, "spatial"),
(16, 10, 12, 8.0, "spatial"),
(17, 9, 11, 5.0, "spatial"),
(18, 8, 11, 8.0, "spatial"),
(19, 4, 12, 25.0, "spatial"),
(20, 12, 13, 3.0, "spatial"),
(21, 12, 15, 9.0, "spatial"),
(22, 13, 17, 11.0, "spatial"),
(23, 14, 15, 2.0, "spatial"),
(24, 12, 14, 6.0, "spatial"),
(25, 15, 18, 10.0, "spatial"),
(26, 18, 20, 7.0, "spatial"),
(27, 16, 21, 13.0, "spatial"),
(28, 17, 19, 8.0, "spatial"),
(29, 15, 19, 14.0, "spatial"),
(30, 21, 23, 4.0, "spatial"),
(31, 21, 22, 3.0, "spatial"),
(32, 21, 25, 9.0, "spatial"),
(33, 23, 26, 8.0, "spatial"),
(34, 22, 24, 5.0, "spatial"),
(35, 20, 24, 10.0, "spatial"),
(36, 15, 16, 2.0, "spatial"),
(37, 24, 25, 3.0, "spatial")
;

# Same test as in dijkstra-t.cc se dijkstra-t.cc for more details TODO try other bigger dataset

SELECT ST_SHORTEST_DIR_PATH(edges.id, edges.from_id, edges.to_id, edges.cost, points.point, 0, 26)
FROM edges
JOIN points ON points.id = edges.to_id
;
SELECT ST_SHORTEST_DIR_PATH(id, from_id, to_id, cost, NULL, 0, 26) FROM edges;

UPDATE edges SET cost = 1000.0 where id = 12;

SELECT ST_SHORTEST_DIR_PATH(edges.id, edges.from_id, edges.to_id, edges.cost, points.point, 0, 26)
FROM edges
JOIN points ON points.id = edges.to_id
;
SELECT ST_SHORTEST_DIR_PATH(id, from_id, to_id, cost, NULL, 0, 26) FROM edges;

UPDATE edges SET cost = 1000.0 where id = 10;

SELECT ST_SHORTEST_DIR_PATH(edges.id, edges.from_id, edges.to_id, edges.cost, points.point, 0, 26)
FROM edges
JOIN points ON points.id = edges.to_id
;
SELECT ST_SHORTEST_DIR_PATH(id, from_id, to_id, cost, NULL, 0, 26) FROM edges;

--echo # -----------------------------
--echo # |[3] testing error detection|
--echo # -----------------------------

DELETE FROM edges;
ALTER TABLE edges DROP FOREIGN KEY point_ref;
DROP TABLE points;

ALTER TABLE edges ADD COLUMN to_point POINT SRID 0;

INSERT INTO edges VALUES
(  0,  0,  1,  1.1 , "spatial", POINT( 2, 1 ) ),
(  1,  0,  2,  2.1 , "spatial", POINT( 3, 2 ) ),
(  2,  1,  2,  1.8 , "spatial", POINT( 0, 4 ) )
;

--error ER_GEOMETRY_REDEFINED
SELECT ST_SHORTEST_DIR_PATH(id, from_id, to_id, cost, to_point, 0, 1) FROM edges;
DELETE FROM edges WHERE id = 2;

# no path
--error ER_NO_PATH_FOUND
SELECT ST_SHORTEST_DIR_PATH(id, from_id, to_id, cost, to_point, 1, 0) FROM edges;

# start = end
--error ER_START_AND_END_NODE_CONFLICT
SELECT ST_SHORTEST_DIR_PATH(id, from_id, to_id, cost, to_point, 0, 0) FROM edges;

## inconsistent use of geometry
DELETE FROM edges WHERE id = 2;
INSERT INTO edges VALUES
(  2,  0,  2,  2.1 , "spatial", NULL )
;
# geom to null
--error ER_INCONSISTENT_GEOMETRY_NULLNESS
SELECT ST_SHORTEST_DIR_PATH(id, from_id, to_id, cost, to_point, 0, 1) FROM edges;
# null to geom
DELETE FROM edges;
INSERT INTO edges VALUES
(  0,  0,  1,  1.1 , "spatial", NULL ),
(  1,  0,  2,  2.1 , "spatial", POINT( 3, 2 ) )
;
--error ER_INCONSISTENT_GEOMETRY_NULLNESS
SELECT ST_SHORTEST_DIR_PATH(id, from_id, to_id, cost, to_point, 0, 1) FROM edges;

DELETE FROM edges;
INSERT INTO edges VALUES
(  0,  0,  1,  1.1 , "spatial", POINT( 2, 1 ) ),
(  1,  0,  2,  2.1 , "spatial", POINT( 3, 2 ) ),
(  2,  1,  0,  1.8 , "spatial", POINT( 0, 4 ) )
;

## bad input
# same id
--error ER_DUPLICATE_EDGE_ID
SELECT ST_SHORTEST_DIR_PATH(0 , from_id, to_id, cost, to_point, 0, 1) FROM edges;

# edge loop
INSERT INTO edges VALUES
( 9, 9, 9, 9.0, "spatial", POINT(9,9) );
--error ER_EDGE_LOOP
SELECT ST_SHORTEST_DIR_PATH(id, from_id, to_id, cost, to_point, 0, 1) FROM edges;
DELETE FROM edges WHERE id = 9;

# cost <= 0
INSERT INTO edges VALUES
( 9, 8, 9, 0.0, "spatial", POINT(9, 9));
--error ER_NEGATIVE_OR_ZERO_EDGE_COST
SELECT ST_SHORTEST_DIR_PATH(id, from_id, to_id, cost, to_point, 0, 1) FROM edges;
UPDATE edges SET cost = -1.0 WHERE id = 9;
--error ER_NEGATIVE_OR_ZERO_EDGE_COST
SELECT ST_SHORTEST_DIR_PATH(id, from_id, to_id, cost, to_point, 0, 1) FROM edges;
DELETE FROM edges WHERE id = 9;

# bad geom
--error ER_GIS_INVALID_DATA
SELECT ST_SHORTEST_DIR_PATH(id, from_id, to_id, cost, 0       , 0, 1) FROM edges;
# wrong geom
--error ER_GIS_WRONG_GEOM_TYPE
# SELECT ST_SHORTEST_DIR_PATH(id, from_id, to_id, cost, ???, 0, 1) FROM edges;

# in_sum_expr instead of const expr
--error ER_WRONG_ARGUMENTS
SELECT ST_SHORTEST_DIR_PATH(id, from_id, to_id, cost, to_point, id, 1) FROM edges;
--error ER_WRONG_ARGUMENTS
SELECT ST_SHORTEST_DIR_PATH(id, from_id, to_id, cost, to_point, 0, id) FROM edges;

# NULL when not allowed
--error ER_WRONG_ARGUMENTS
SELECT ST_SHORTEST_DIR_PATH(NULL, from_id, to_id, cost, to_point, 0, id) FROM edges;
--error ER_WRONG_ARGUMENTS
SELECT ST_SHORTEST_DIR_PATH(id, NULL    , to_id, cost, to_point, 0, id) FROM edges;
--error ER_WRONG_ARGUMENTS
SELECT ST_SHORTEST_DIR_PATH(id, from_id, NULL  , cost, to_point, 0, id) FROM edges;
--error ER_WRONG_ARGUMENTS
SELECT ST_SHORTEST_DIR_PATH(id, from_id, to_id, NULL , to_point, 0, id) FROM edges;
--error ER_WRONG_ARGUMENTS
SELECT ST_SHORTEST_DIR_PATH(id, from_id, to_id, cost, to_point, NULL, id) FROM edges;
--error ER_WRONG_ARGUMENTS
SELECT ST_SHORTEST_DIR_PATH(id, from_id, to_id, cost, to_point, 0, NULL) FROM edges;

--echo # -------------
--echo # |[4] cleanup|
--echo # -------------

DROP TABLE edges;
